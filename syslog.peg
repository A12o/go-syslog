{

package syslog

import "strings"

const facilityMax int = 23
const severityMax int = 7
const privalMax int = facilityMax * 8 + severityMax

func toIfaceSlice(v interface{}) []interface{} {
  if v == nil {
      return nil
  }
  return v.([]interface{})
}

func toStringSlice(v []interface{}) []string {
  s := make([]string, len(v))
  for i, c := range v {
    s[i] = c.(string)
  }
  return s
}

type uint8Data struct {
  data []uint8
}

func toUint8Slice(v []interface{}) []uint8 {
	// u := []uint8{}
	// for _, c := range v {
  //   u = append(u, c.([]uint8)...)
	// }
	// return u

  u := make([]uint8, len(v))
  for i, c := range v {
    uints := c.([]uint8)
    u[i] = uints[0]
  }
  return u
}

func utf8ToNumber(bseq []uint8) int {
  out := 0
  ord := 1
  for i := len(bseq) - 1; i >= 0; i-- {
    out += (int(bseq[i]) - '0') * ord
    ord *= 10
  }
  return out
}

}

Pri <- '<' value:Prival '>' EOF {
  return value, nil
}

Prival <- values:Digit+ &{
  valuesSlice := toUint8Slice(toIfaceSlice(values))
  if len(valuesSlice) > 3 {
    return false, fmt.Errorf("more than 3 digits")
  }

  num := utf8ToNumber(valuesSlice)
  if num > privalMax {
    return false, fmt.Errorf("greater than 191")
  }

  return true, nil
}

Digit "digit" <- [0-9]
Sp "whitespace" <- ' '

EOF <- !.
